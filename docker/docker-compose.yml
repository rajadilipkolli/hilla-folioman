services:

  postgresqldb:
    image: postgres:15.11-alpine
    hostname: postgresqldb
    container_name: postgresqldb
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    environment:
      - POSTGRES_USER=appuser
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=appdb
    ports:
      - "5432:5432"
    networks:
      - folioman-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    environment:
      - PGADMIN_DEFAULT_EMAIL=pgadmin4@pgadmin.org
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
    ports:
      - "5050:80"
    depends_on:
      postgresqldb:
        condition: service_started
    volumes:
      - ./docker_pgadmin_servers.json:/pgadmin4/servers.json
    entrypoint:
      - "/bin/sh"
      - "-c"
      - "/bin/echo 'postgresqldb:5432:*:appuser:secret' > /tmp/pgpassfile && chmod 600 /tmp/pgpassfile && /entrypoint.sh"
    restart: unless-stopped
    networks:
      - folioman-network

  redis:
    image: 'redis/redis-stack'
    container_name: redis
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    ports:
      - "6379:6379"
      - "8000:8000"
    volumes:
      - 'redis_data:/data:rw'
    healthcheck:
      test: redis-cli ping
      interval: 3s
      timeout: 5s
      retries: 5
    networks:
      - folioman-network

  grafanalgtm:
    image: grafana/otel-lgtm:0.8.4
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    container_name: grafanalgtm
    networks:
      - folioman-network
    environment:
      - OTEL_METRIC_EXPORT_INTERVAL=500
      - ENABLE_LOGS_ALL=true
    ports:
      - "3000:3000"
      - "4317:4317"
      - "4318:4318"
      - "9090:9090"

  mongodb:
    hostname: mongodb
    container_name: mongodb
    image: mongo:8.0.4
    restart: unless-stopped
    volumes:
      - mongodb:/data/db
    ports:
      - "27017:27017"
    networks:
      - folioman-network
    healthcheck:
      test: |
        mongosh --eval "try { rs.status().ok } catch (e) { rs.initiate({ _id: 'rs0', members: [{ _id: 0, host: 'localhost:27017' }] }).ok }"
      interval: 10s
      start_period: 30s
      timeout: 5s
      retries: 3
    command: [ "/usr/bin/mongod", "--replSet", "rs0", "--bind_ip_all" ]

networks:
  folioman-network:
    driver: bridge
volumes:
  redis_data:
  mongodb:
